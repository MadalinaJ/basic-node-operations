
1. Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was. 

    //sort commands.js
 done(data);
        if (err) throw err;
       break;
       commandLibrary.cat(userInputArray.slice(1));
      break;
      commandLibrary.echo(userInputArray.slice(1).join(" "));
     process.stdout.write('\nprompt > ');
     process.stdout.write(output);
    case "cat":
    case "echo":   
    const fileName = fullPath[0];
    done(userInput);
    fs.readFile(fileName, (err, data) => {
    });
   "cat": function(fullPath) {
   "echo": function(userInput) {
   const command = userInputArray[0];
   const userInputArray = userInput.split(" ");
   switch (command) {
  }
 module.exports.commandLibrary = commandLibrary;
 module.exports.evaluateCmd = evaluateCmd;
 }
 }
 };
const commandLibrary = {
const fs = require("fs");
function done(output) {
function evaluateCmd(userInput) {
}
},

- this command takes all the lines in the file and sorts each line alphabetically.

    // wc commands.js

  35      73     804 commands.js

- this command prints the newline, word and byte count for the file.


    // uniq commands.js

const fs = require("fs");

function done(output) {
     process.stdout.write(output);
     process.stdout.write('\nprompt > ');
 }

function evaluateCmd(userInput) {
   const userInputArray = userInput.split(" ");
   const command = userInputArray[0];
   switch (command) {
    case "echo":   
      commandLibrary.echo(userInputArray.slice(1).join(" "));
      break;
    case "cat":
       commandLibrary.cat(userInputArray.slice(1));
       break;
  }
 }

const commandLibrary = {
   "echo": function(userInput) {
    done(userInput);
},

   "cat": function(fullPath) {
    const fileName = fullPath[0];
    fs.readFile(fileName, (err, data) => {
        if (err) throw err;
        done(data);
    });
}
 };

 module.exports.commandLibrary = commandLibrary;
 module.exports.evaluateCmd = evaluateCmd;

- this command sorts each line in the file and returns only the lines that are different. 

2. Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.

// sort commands.js | uniq

           done(data);
        if (err) throw err;
       break;
       commandLibrary.cat(userInputArray.slice(1));
      break;
      commandLibrary.echo(userInputArray.slice(1).join(" "));
     process.stdout.write('\nprompt > ');
     process.stdout.write(output);
    case "cat":
    case "echo":   
    const fileName = fullPath[0];
    done(userInput);
    fs.readFile(fileName, (err, data) => {
    });
   "cat": function(fullPath) {
   "echo": function(userInput) {
   const command = userInputArray[0];
   const userInputArray = userInput.split(" ");
   switch (command) {
  }
 module.exports.commandLibrary = commandLibrary;
 module.exports.evaluateCmd = evaluateCmd;
 }
 };
const commandLibrary = {
const fs = require("fs");
function done(output) {
function evaluateCmd(userInput) {
}
},

SORT command sorted the command.js file and the UNIQ command deleted any duplicate lines; also it deleted the lines that were empty. 

6. Given aÂ string, reverse the order of characters in each word within a sentence while maintaining the original 
   word order and whitespace and return the string.

function reverseString(inputItem) { 

  let splitString = inputItem.split(' ');

  let reverseNewArray = [];

  splitString.forEach((currentItem) => {              
        
      let reversedString = currentItem.split('')

      reversedString.reverse();

      reversedString = reversedString.join(''); 

      reverseNewArray.push(reversedString);
   
  })
     return reverseNewArray.join(' ');
}

console.log(reverseString('Plant a tree'));
